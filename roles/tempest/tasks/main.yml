---
- name: Create refstack workdir
  become: true
  delegate_to: "{{ groups[tempest_runtime_group] | first }}"
  ansible.builtin.file:
    path: "{{ refstack_workdir }}"
    state: directory
    mode: 0750
    owner: "{{ operator_user }}"
    group: "{{ operator_user }}"

- name: Check for existing tempest initialisation
  delegate_to: "{{ groups[tempest_runtime_group] | first }}"
  ansible.builtin.stat:
    path: "{{ tempest_workdir }}/tempest/.stestr.conf"
  register: _stestr_conf

- name: Init tempest
  delegate_to: "{{ groups[tempest_runtime_group] | first }}"
  community.docker.docker_container:
    <<: &docker_common_opt
      cleanup: true
      detach: false
      image: "{{ tempest_image }}"
      init: false
      interactive: false
      name: "{{ tempest_container_name }}"
      network_mode: 'host'
      volumes:
        - "{{ tempest_workdir }}:/tempest"
        - "/etc/ssl/certs:/etc/ssl/certs:ro"
    command:
      - init
      - '--workspace-path'
      - "/tempest/workspace.yaml"
      - '--name'
      - "{{ tempest_workspace_name }}"
      - "/tempest"
  when:
    - not _stestr_conf.stat.exists

- name: Resolve image IDs
  openstack.cloud.image_info:
    <<: &os_auth
      auth_type: password
      auth:
        auth_url: "{{ tempest_uri_v3 }}"
        username: "{{ tempest_admin_username }}"
        password: "{{ tempest_admin_password }}"
        project_name: "{{ tempest_admin_project_name }}"
        user_domain_name: "{{ tempest_admin_domain_name }}"
        project_domain_name: "{{ tempest_admin_domain_name }}"
      ca_cert: "{{ tempest_ca_cert }}"
    name: "{{ item }}"
  loop:
    - "{{ tempest_image_ref }}"
    - "{{ tempest_image_ref_alt }}"
  register: _images

- name: Assert images have been resolved
  ansible.builtin.assert:
    that:
      - _images.results | map(attribute='images') | flatten | map(attribute='id') | list | unique | length == 2

- name: Resolve img_file or network api extensions
  when:
    - tempest_img_file is undefined or tempest_api_extensions is undefined
  block:  # noqa: osism-fqcn
    - name: Get auth token
      openstack.cloud.auth:
        <<: *os_auth
      register: _auth_token
    - name: Get endpoint catalog
      ansible.builtin.uri:
        headers: &os_auth_headers
          Content-Type: application/json
          X-Auth-Token: "{{ _auth_token.auth_token }}"
        method: GET
        url: "{{ tempest_uri_v3 }}/endpoints"
      register: _endpoints
    - name: Get service catalog
      openstack.cloud.catalog_service_info:
        <<: *os_auth
      register: _service_catalog
    - name: Download img_file from image_ref
      when:
        - tempest_img_file is undefined
      vars:
        _img_file_name: "{{ _images.results | map(attribute='images') | first | map(attribute='name') | first | replace(' ', '_') }}"
        service_id: "{{ _service_catalog.services | selectattr('type', 'equalto', 'image') | selectattr('is_enabled', 'truthy') | map(attribute='id') | first }}"
      ansible.builtin.get_url:
        headers: *os_auth_headers
        dest: "/tempest/{{ _img_file_name }}"
        mode: '0640'
        owner: dragon
        group: dragon
        url: "{{ _endpoints.json.endpoints | selectattr('interface', 'equalto', 'public') | selectattr('service_id', 'equalto', service_id) | map(attribute='url') | first }}{{ _images.results | map(attribute='images') | first | map(attribute='file') | first }}"
      register: _img_file
    - name: Get network API extensions
      when:
        - tempest_api_extensions is undefined
      vars:
        service_id: "{{ _service_catalog.services | selectattr('type', 'equalto', 'network') | selectattr('is_enabled', 'truthy') | map(attribute='id') | first }}"
      ansible.builtin.uri:
        headers: *os_auth_headers
        method: GET
        url: "{{ _endpoints.json.endpoints | selectattr('interface', 'equalto', 'public') | selectattr('service_id', 'equalto', service_id) | map(attribute='url') | first }}/v2.0/extensions"
      register: _network_api_extensions
  always:
    - name: Revoke token
      ansible.builtin.uri:
        headers:
          X-Subject-Token: "{{ _auth_token.auth_token }}"
          <<: *os_auth_headers
        method: DELETE
        status_code:
          - 204
        url: "{{ tempest_uri_v3 }}/auth/tokens"
- name: Set fact for config option api_extensions
  when:
    - tempest_api_extensions is undefined
  ansible.builtin.set_fact:
    tempest_api_extensions: "{{ _network_api_extensions.json.extensions | map(attribute='alias') | join(',') }}"
- name: Set fact for config option img_file
  when:
    - tempest_img_file is undefined
  ansible.builtin.set_fact:
    tempest_img_file: "{{ _img_file.dest }}"

- name: Resolve floating network ID
  block:  # noqa: osism-fqcn
    - name: Resolve floating network ID
      openstack.cloud.networks_info:
        <<: *os_auth
        name: "{{ tempest_floating_ip_network }}"
      register: _floating_networks
    - name: Assert floating network id has been resolved
      ansible.builtin.assert:
        that:
          - _floating_networks.networks | selectattr('is_router_external', 'truthy', 'convert_bool=True') | map(attribute='id') | length > 0

- name: Resolve flavor IDs
  when:
    - not tempest_create_flavors | bool
  block:  # noqa: osism-fqcn
    - name: Resolve flavor IDs
      openstack.cloud.compute_flavor_info:
        <<: *os_auth
        name: "{{ item.name if 'name' in item else omit }}"
        vcpus: "{{ item.vcpus if 'vcpus' in item else omit }}"
        ram: "{{ item.ram if 'ram' in item else omit }}"
        ephemeral: "{{ item.disk if 'disk' in item else omit }}"
      loop:
        - "{{ tempest_flavor }}"
        - "{{ tempest_flavor_alt }}"
      register: _flavors_resolved
    - name: Assert flavors have been resolved
      ansible.builtin.assert:
        that:
          - _flavors_resolved.results | map(attribute='flavors') | flatten | map(attribute='id') | list | unique | length == 2

- name: Prepare and run tempest
  block:  # noqa: osism-fqcn
    - name: Create tempest flavors
      openstack.cloud.compute_flavor:
        <<: *os_auth
        name: "{{ item.name }}"
        vcpus: "{{ item.vcpus }}"
        ram: "{{ item.ram }}"
        disk: "{{ item.disk }}"
        is_public: true
      loop:
        - "{{ tempest_flavor }}"
        - "{{ tempest_flavor_alt }}"
      register: _flavors_created
      when:
        - tempest_create_flavors | bool
    - name: Copy tempest.conf file
      vars:
        _image_ref: "{{ _images.results | map(attribute='images') | first | map(attribute='id') | first }}"
        _image_ref_alt: "{{ _images.results | map(attribute='images') | last | map(attribute='id') | first }}"
        _flavor_ref: >-
          {{
            _flavors_resolved.results | map(attribute='flavors') | first | map(attribute='id') | first
            if not tempest_create_flavors | bool else
            _flavors_created.results | map(attribute='flavor') | map(attribute='id') | first
          }}
        _flavor_ref_alt: >-
          {{
            _flavors_resolved.results | map(attribute='flavors') | last | map(attribute='id') | first
            if not tempest_create_flavors | bool else
            _flavors_created.results | map(attribute='flavor') | map(attribute='id') | last
          }}
        _floating_ip_network_id: "{{ _floating_networks.networks | selectattr('is_router_external', 'truthy', 'convert_bool=True') | map(attribute='id') | first }}"
      ansible.builtin.template:
        src: tempest.conf.j2
        dest: "/tempest/etc/tempest.conf"
        owner: dragon
        group: dragon
        mode: '0640'
    - name: Run tempest tests
      vars:
        _tempest_run_base:
          - run
          - '--workspace-path'
          - "/tempest/workspace.yaml"
          - '--workspace'
          - "{{ tempest_workspace_name }}"
        tempest_run_args: >-
          {{
            (['--concurrency', tempest_concurrency] if tempest_concurrency | int > 1 else ['--serial'])
            +
            (['--regex', tempest_include_regex] if tempest_include_regex is defined else [])
            +
            (['--exclude-regex', tempest_exclude_regex] if tempest_exclude_regex is defined else [])
          }}
      block:  # noqa: osism-fqcn
        - name: Register selected tempest tests
          delegate_to: "{{ groups[tempest_runtime_group] | first }}"
          community.docker.docker_container:
            <<: *docker_common_opt
            command: "{{ _tempest_run_base + tempest_run_args + ['--list-tests'] }}"
          changed_when: false
          register: _tempest_tests
        - name: List selected tempest tests
          ansible.builtin.debug:
            msg: "{{ _tempest_tests.container.Output.split('\n') }}"
        - name: Run tempest
          delegate_to: "{{ groups[tempest_runtime_group] | first }}"
          community.docker.docker_container:
            <<: *docker_common_opt
            command: "{{ _tempest_run_base + tempest_run_args }}"
          changed_when: false
          register: _tempest_run
        - name: Show result
          ansible.builtin.debug:
            msg: "{{ _tempest_run.container.Output.split('\n') }}"
        - name: Show slowest tests
          delegate_to: "{{ groups[tempest_runtime_group] | first }}"
          community.docker.docker_container:
            <<: *docker_common_opt
            entrypoint:
              - /usr/local/bin/stestr
            command:
              - slowest
            working_dir: "/tempest"
          changed_when: false
          register: _stestr_slowest
        - name: Show slowest tests
          ansible.builtin.debug:
            msg: "{{ _stestr_slowest.container.Output.split('\n') }}"
      rescue:
        - name: Show failed tests
          delegate_to: "{{ groups[tempest_runtime_group] | first }}"
          community.docker.docker_container:
            <<: *docker_common_opt
            entrypoint:
              - /usr/local/bin/stestr
            command:
              - failing
            working_dir: "/tempest"
          changed_when: false
          register: _stestr_failing
          failed_when: _stestr_failing.status > 1
        - name: Show failed tests
          ansible.builtin.debug:
            msg: "{{ _stestr_failing.container.Output.split('\n') }}"
          failed_when: true
  always:
    - name: Remove tempest flavors
      openstack.cloud.compute_flavor:
        <<: *os_auth
        name: "{{ item.name }}"
        state: absent
      loop:
        - "{{ tempest_flavor }}"
        - "{{ tempest_flavor_alt }}"
      when:
        - tempest_create_flavors | bool
